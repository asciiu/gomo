// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/asciiu/gomo/binance-service/proto/binance/binance.proto

/*
Package binance is a generated protocol buffer package.

It is generated from these files:
	github.com/asciiu/gomo/binance-service/proto/binance/binance.proto

It has these top-level messages:
	CandleRequest
	MarketRestrictionRequest
	Candle
	MarketRestriction
	Candles
	RestrictionData
	MarketRestrictionResponse
	CandlesResponse
*/
package binance

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import balance "github.com/asciiu/gomo/binance-service/proto/balance"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CandleRequest struct {
	MarketName        string `protobuf:"bytes,1,opt,name=marketName" json:"marketName"`
	TimePeriodSeconds int32  `protobuf:"varint,2,opt,name=timePeriodSeconds" json:"timePeriodSeconds"`
}

func (m *CandleRequest) Reset()                    { *m = CandleRequest{} }
func (m *CandleRequest) String() string            { return proto.CompactTextString(m) }
func (*CandleRequest) ProtoMessage()               {}
func (*CandleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CandleRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *CandleRequest) GetTimePeriodSeconds() int32 {
	if m != nil {
		return m.TimePeriodSeconds
	}
	return 0
}

type MarketRestrictionRequest struct {
	MarketName string `protobuf:"bytes,1,opt,name=marketName" json:"marketName"`
}

func (m *MarketRestrictionRequest) Reset()                    { *m = MarketRestrictionRequest{} }
func (m *MarketRestrictionRequest) String() string            { return proto.CompactTextString(m) }
func (*MarketRestrictionRequest) ProtoMessage()               {}
func (*MarketRestrictionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MarketRestrictionRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

type Candle struct {
	OpenTime                 string  `protobuf:"bytes,1,opt,name=openTime" json:"openTime"`
	Open                     float64 `protobuf:"fixed64,2,opt,name=open" json:"open"`
	High                     float64 `protobuf:"fixed64,3,opt,name=high" json:"high"`
	Low                      float64 `protobuf:"fixed64,4,opt,name=low" json:"low"`
	Close                    float64 `protobuf:"fixed64,5,opt,name=close" json:"close"`
	Volume                   float64 `protobuf:"fixed64,6,opt,name=volume" json:"volume"`
	CloseTime                string  `protobuf:"bytes,7,opt,name=closeTime" json:"closeTime"`
	QuoteAssetVolume         float64 `protobuf:"fixed64,8,opt,name=quoteAssetVolume" json:"quoteAssetVolume"`
	NumberOfTrades           int32   `protobuf:"varint,9,opt,name=numberOfTrades" json:"numberOfTrades"`
	TakerBuyBaseAssetVolume  float64 `protobuf:"fixed64,10,opt,name=takerBuyBaseAssetVolume" json:"takerBuyBaseAssetVolume"`
	TakerBuyQuoteAssetVolume float64 `protobuf:"fixed64,11,opt,name=takerBuyQuoteAssetVolume" json:"takerBuyQuoteAssetVolume"`
}

func (m *Candle) Reset()                    { *m = Candle{} }
func (m *Candle) String() string            { return proto.CompactTextString(m) }
func (*Candle) ProtoMessage()               {}
func (*Candle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Candle) GetOpenTime() string {
	if m != nil {
		return m.OpenTime
	}
	return ""
}

func (m *Candle) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *Candle) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Candle) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *Candle) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *Candle) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Candle) GetCloseTime() string {
	if m != nil {
		return m.CloseTime
	}
	return ""
}

func (m *Candle) GetQuoteAssetVolume() float64 {
	if m != nil {
		return m.QuoteAssetVolume
	}
	return 0
}

func (m *Candle) GetNumberOfTrades() int32 {
	if m != nil {
		return m.NumberOfTrades
	}
	return 0
}

func (m *Candle) GetTakerBuyBaseAssetVolume() float64 {
	if m != nil {
		return m.TakerBuyBaseAssetVolume
	}
	return 0
}

func (m *Candle) GetTakerBuyQuoteAssetVolume() float64 {
	if m != nil {
		return m.TakerBuyQuoteAssetVolume
	}
	return 0
}

type MarketRestriction struct {
	MinTradeSize    float64 `protobuf:"fixed64,1,opt,name=minTradeSize" json:"minTradeSize"`
	MaxTradeSize    float64 `protobuf:"fixed64,2,opt,name=maxTradeSize" json:"maxTradeSize"`
	TradeSizeStep   float64 `protobuf:"fixed64,3,opt,name=tradeSizeStep" json:"tradeSizeStep"`
	MinMarketPrice  float64 `protobuf:"fixed64,4,opt,name=minMarketPrice" json:"minMarketPrice"`
	MaxMarketPrice  float64 `protobuf:"fixed64,5,opt,name=maxMarketPrice" json:"maxMarketPrice"`
	MarketPriceStep float64 `protobuf:"fixed64,6,opt,name=marketPriceStep" json:"marketPriceStep"`
	BasePrecision   int32   `protobuf:"varint,7,opt,name=basePrecision" json:"basePrecision"`
	MarketPrecision int32   `protobuf:"varint,8,opt,name=marketPrecision" json:"marketPrecision"`
}

func (m *MarketRestriction) Reset()                    { *m = MarketRestriction{} }
func (m *MarketRestriction) String() string            { return proto.CompactTextString(m) }
func (*MarketRestriction) ProtoMessage()               {}
func (*MarketRestriction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MarketRestriction) GetMinTradeSize() float64 {
	if m != nil {
		return m.MinTradeSize
	}
	return 0
}

func (m *MarketRestriction) GetMaxTradeSize() float64 {
	if m != nil {
		return m.MaxTradeSize
	}
	return 0
}

func (m *MarketRestriction) GetTradeSizeStep() float64 {
	if m != nil {
		return m.TradeSizeStep
	}
	return 0
}

func (m *MarketRestriction) GetMinMarketPrice() float64 {
	if m != nil {
		return m.MinMarketPrice
	}
	return 0
}

func (m *MarketRestriction) GetMaxMarketPrice() float64 {
	if m != nil {
		return m.MaxMarketPrice
	}
	return 0
}

func (m *MarketRestriction) GetMarketPriceStep() float64 {
	if m != nil {
		return m.MarketPriceStep
	}
	return 0
}

func (m *MarketRestriction) GetBasePrecision() int32 {
	if m != nil {
		return m.BasePrecision
	}
	return 0
}

func (m *MarketRestriction) GetMarketPrecision() int32 {
	if m != nil {
		return m.MarketPrecision
	}
	return 0
}

type Candles struct {
	Candles []*Candle `protobuf:"bytes,1,rep,name=candles" json:"candles"`
}

func (m *Candles) Reset()                    { *m = Candles{} }
func (m *Candles) String() string            { return proto.CompactTextString(m) }
func (*Candles) ProtoMessage()               {}
func (*Candles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Candles) GetCandles() []*Candle {
	if m != nil {
		return m.Candles
	}
	return nil
}

type RestrictionData struct {
	Restrictions *MarketRestriction `protobuf:"bytes,1,opt,name=restrictions" json:"restrictions"`
}

func (m *RestrictionData) Reset()                    { *m = RestrictionData{} }
func (m *RestrictionData) String() string            { return proto.CompactTextString(m) }
func (*RestrictionData) ProtoMessage()               {}
func (*RestrictionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RestrictionData) GetRestrictions() *MarketRestriction {
	if m != nil {
		return m.Restrictions
	}
	return nil
}

type MarketRestrictionResponse struct {
	Status  string           `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string           `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *RestrictionData `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *MarketRestrictionResponse) Reset()                    { *m = MarketRestrictionResponse{} }
func (m *MarketRestrictionResponse) String() string            { return proto.CompactTextString(m) }
func (*MarketRestrictionResponse) ProtoMessage()               {}
func (*MarketRestrictionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MarketRestrictionResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MarketRestrictionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MarketRestrictionResponse) GetData() *RestrictionData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CandlesResponse struct {
	Status  string   `protobuf:"bytes,1,opt,name=status" json:"status"`
	Message string   `protobuf:"bytes,2,opt,name=message" json:"message"`
	Data    *Candles `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *CandlesResponse) Reset()                    { *m = CandlesResponse{} }
func (m *CandlesResponse) String() string            { return proto.CompactTextString(m) }
func (*CandlesResponse) ProtoMessage()               {}
func (*CandlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CandlesResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CandlesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CandlesResponse) GetData() *Candles {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CandleRequest)(nil), "binance.CandleRequest")
	proto.RegisterType((*MarketRestrictionRequest)(nil), "binance.MarketRestrictionRequest")
	proto.RegisterType((*Candle)(nil), "binance.Candle")
	proto.RegisterType((*MarketRestriction)(nil), "binance.MarketRestriction")
	proto.RegisterType((*Candles)(nil), "binance.Candles")
	proto.RegisterType((*RestrictionData)(nil), "binance.RestrictionData")
	proto.RegisterType((*MarketRestrictionResponse)(nil), "binance.MarketRestrictionResponse")
	proto.RegisterType((*CandlesResponse)(nil), "binance.CandlesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BinanceService service

type BinanceServiceClient interface {
	GetBalances(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalancesResponse, error)
	GetMarketRestrictions(ctx context.Context, in *MarketRestrictionRequest, opts ...client.CallOption) (*MarketRestrictionResponse, error)
	GetCandles(ctx context.Context, in *CandleRequest, opts ...client.CallOption) (*CandlesResponse, error)
}

type binanceServiceClient struct {
	c           client.Client
	serviceName string
}

func NewBinanceServiceClient(serviceName string, c client.Client) BinanceServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "binance"
	}
	return &binanceServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *binanceServiceClient) GetBalances(ctx context.Context, in *balance.BalanceRequest, opts ...client.CallOption) (*balance.BalancesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BinanceService.GetBalances", in)
	out := new(balance.BalancesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceClient) GetMarketRestrictions(ctx context.Context, in *MarketRestrictionRequest, opts ...client.CallOption) (*MarketRestrictionResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BinanceService.GetMarketRestrictions", in)
	out := new(MarketRestrictionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceServiceClient) GetCandles(ctx context.Context, in *CandleRequest, opts ...client.CallOption) (*CandlesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BinanceService.GetCandles", in)
	out := new(CandlesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BinanceService service

type BinanceServiceHandler interface {
	GetBalances(context.Context, *balance.BalanceRequest, *balance.BalancesResponse) error
	GetMarketRestrictions(context.Context, *MarketRestrictionRequest, *MarketRestrictionResponse) error
	GetCandles(context.Context, *CandleRequest, *CandlesResponse) error
}

func RegisterBinanceServiceHandler(s server.Server, hdlr BinanceServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&BinanceService{hdlr}, opts...))
}

type BinanceService struct {
	BinanceServiceHandler
}

func (h *BinanceService) GetBalances(ctx context.Context, in *balance.BalanceRequest, out *balance.BalancesResponse) error {
	return h.BinanceServiceHandler.GetBalances(ctx, in, out)
}

func (h *BinanceService) GetMarketRestrictions(ctx context.Context, in *MarketRestrictionRequest, out *MarketRestrictionResponse) error {
	return h.BinanceServiceHandler.GetMarketRestrictions(ctx, in, out)
}

func (h *BinanceService) GetCandles(ctx context.Context, in *CandleRequest, out *CandlesResponse) error {
	return h.BinanceServiceHandler.GetCandles(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/asciiu/gomo/binance-service/proto/binance/binance.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x49, 0xb7, 0xb6, 0xeb, 0x75, 0x5b, 0xb7, 0x13, 0x6c, 0x59, 0x85, 0xd0, 0x88, 0x26,
	0x54, 0xd0, 0x68, 0xa5, 0xc2, 0x03, 0xda, 0x03, 0x82, 0x0e, 0x69, 0x4f, 0xc0, 0x96, 0x4e, 0xbc,
	0x21, 0xe1, 0xa6, 0x47, 0x6b, 0xad, 0x89, 0xbb, 0xd8, 0x19, 0x03, 0x3e, 0x22, 0x5f, 0x87, 0x17,
	0xde, 0x50, 0x6d, 0x27, 0x6d, 0x52, 0x36, 0x81, 0x78, 0x8a, 0xef, 0x77, 0x7f, 0xdf, 0x5d, 0xee,
	0x6c, 0x43, 0x6f, 0xc4, 0xd5, 0x38, 0x19, 0xb4, 0x03, 0x11, 0x76, 0x98, 0x0c, 0x38, 0x4f, 0x3a,
	0x23, 0x11, 0x8a, 0xce, 0x80, 0x47, 0x2c, 0x0a, 0xe8, 0xa9, 0xa4, 0xf8, 0x8a, 0x07, 0xd4, 0x99,
	0xc6, 0x42, 0x65, 0x34, 0xfd, 0xb6, 0x35, 0xc5, 0xaa, 0x35, 0x9b, 0xff, 0x18, 0x8c, 0x4d, 0x4c,
	0x30, 0xf3, 0x35, 0xc1, 0xbc, 0x8f, 0xb0, 0x71, 0xcc, 0xa2, 0xe1, 0x84, 0x7c, 0xba, 0x4c, 0x48,
	0x2a, 0x7c, 0x00, 0x10, 0xb2, 0xf8, 0x82, 0xd4, 0x3b, 0x16, 0x92, 0xeb, 0xec, 0x3b, 0xad, 0x9a,
	0xbf, 0x40, 0xf0, 0x10, 0xb6, 0x15, 0x0f, 0xe9, 0x94, 0x62, 0x2e, 0x86, 0x7d, 0x0a, 0x44, 0x34,
	0x94, 0x6e, 0x69, 0xdf, 0x69, 0x95, 0xfd, 0x65, 0x87, 0x77, 0x04, 0xee, 0x5b, 0xbd, 0xd7, 0x27,
	0xa9, 0x62, 0x1e, 0x28, 0x2e, 0xa2, 0xbf, 0xcc, 0xe4, 0xfd, 0x2c, 0x41, 0xc5, 0xd4, 0x86, 0x4d,
	0x58, 0x13, 0x53, 0x8a, 0xce, 0x79, 0x26, 0xcc, 0x6c, 0x44, 0x58, 0x9d, 0xad, 0x75, 0x0d, 0x8e,
	0xaf, 0xd7, 0x33, 0x36, 0xe6, 0xa3, 0xb1, 0xbb, 0x62, 0xd8, 0x6c, 0x8d, 0x5b, 0xb0, 0x32, 0x11,
	0x5f, 0xdc, 0x55, 0x8d, 0x66, 0x4b, 0xbc, 0x0b, 0xe5, 0x60, 0x22, 0x24, 0xb9, 0x65, 0xcd, 0x8c,
	0x81, 0x3b, 0x50, 0xb9, 0x12, 0x93, 0x24, 0x24, 0xb7, 0xa2, 0xb1, 0xb5, 0xf0, 0x3e, 0xd4, 0xb4,
	0x40, 0x17, 0x51, 0xd5, 0x45, 0xcc, 0x01, 0x3e, 0x81, 0xad, 0xcb, 0x44, 0x28, 0x7a, 0x2d, 0x25,
	0xa9, 0x0f, 0x66, 0xff, 0x9a, 0xde, 0xbf, 0xc4, 0xf1, 0x11, 0x6c, 0x46, 0x49, 0x38, 0xa0, 0xf8,
	0xfd, 0xe7, 0xf3, 0x98, 0x0d, 0x49, 0xba, 0x35, 0xdd, 0xbf, 0x02, 0xc5, 0x17, 0xb0, 0xab, 0xd8,
	0x05, 0xc5, 0xbd, 0xe4, 0x6b, 0x8f, 0xc9, 0x5c, 0x68, 0xd0, 0xa1, 0x6f, 0x72, 0xe3, 0x11, 0xb8,
	0xa9, 0xeb, 0xac, 0x58, 0x55, 0x5d, 0x6f, 0xbd, 0xd1, 0xef, 0xfd, 0x28, 0xc1, 0xf6, 0xd2, 0xcc,
	0xd0, 0x83, 0xf5, 0x90, 0x47, 0xba, 0xb0, 0x3e, 0xff, 0x66, 0xa6, 0xe0, 0xf8, 0x39, 0xa6, 0x35,
	0xec, 0x7a, 0xae, 0x29, 0x59, 0xcd, 0x02, 0xc3, 0x03, 0xd8, 0x50, 0xa9, 0xd1, 0x57, 0x34, 0xb5,
	0x23, 0xca, 0xc3, 0x59, 0x87, 0x42, 0x1e, 0x99, 0x2a, 0x4e, 0x63, 0x1e, 0x90, 0x1d, 0x5b, 0x81,
	0x6a, 0x1d, 0xbb, 0x5e, 0xd4, 0x95, 0xad, 0x2e, 0x47, 0xb1, 0x05, 0x8d, 0x70, 0x6e, 0xea, 0xbc,
	0x66, 0xb8, 0x45, 0x3c, 0xab, 0x6f, 0xc0, 0x24, 0x9d, 0xc6, 0x14, 0x70, 0xc9, 0x45, 0xa4, 0x27,
	0x5d, 0xf6, 0xf3, 0x70, 0x31, 0x5e, 0xaa, 0x5b, 0xd3, 0xba, 0x22, 0xf6, 0x9e, 0x43, 0xd5, 0x9c,
	0x61, 0x89, 0x8f, 0xa1, 0x1a, 0x98, 0xa5, 0xeb, 0xec, 0xaf, 0xb4, 0xea, 0xdd, 0x46, 0x3b, 0xbd,
	0xd8, 0xf6, 0x0a, 0xa6, 0x7e, 0xef, 0x0c, 0x1a, 0x0b, 0xcd, 0x7f, 0xc3, 0x14, 0xc3, 0x97, 0xb0,
	0x1e, 0xcf, 0x91, 0xd4, 0x03, 0xa8, 0x77, 0x9b, 0x59, 0x88, 0xe5, 0x6b, 0x96, 0xd3, 0x7b, 0xdf,
	0x61, 0xef, 0x0f, 0x37, 0x51, 0x4e, 0x45, 0x64, 0xce, 0xbc, 0x54, 0x4c, 0x25, 0xd2, 0xde, 0x2e,
	0x6b, 0xa1, 0x0b, 0xd5, 0x90, 0xa4, 0x64, 0x23, 0x33, 0xcc, 0x9a, 0x9f, 0x9a, 0x78, 0x08, 0xab,
	0x43, 0xa6, 0x98, 0x1e, 0x5f, 0xbd, 0xeb, 0x66, 0x65, 0x14, 0xca, 0xf6, 0xb5, 0xca, 0xe3, 0xd0,
	0xb0, 0x5d, 0xf8, 0x8f, 0x94, 0x07, 0xb9, 0x94, 0x5b, 0x85, 0xe6, 0x49, 0x93, 0xaa, 0xfb, 0xcb,
	0x81, 0xcd, 0x9e, 0xf1, 0xf4, 0xcd, 0xfb, 0x87, 0xc7, 0x50, 0x3f, 0x21, 0xd5, 0x33, 0xef, 0x9e,
	0xc4, 0xdd, 0x76, 0xfa, 0x04, 0x5a, 0x64, 0x1f, 0xa4, 0xe6, 0x5e, 0xd1, 0x91, 0x55, 0xeb, 0xdd,
	0xc1, 0x4f, 0x70, 0xef, 0x84, 0xd4, 0x52, 0x0b, 0x25, 0x3e, 0xbc, 0x65, 0x04, 0x36, 0xb0, 0x77,
	0x9b, 0x24, 0xcb, 0xf0, 0x0a, 0xe0, 0x84, 0x54, 0x7a, 0x5a, 0x76, 0x8a, 0x87, 0xc3, 0xc6, 0x72,
	0x97, 0xfe, 0x3b, 0x8b, 0x30, 0xa8, 0xe8, 0x37, 0xfd, 0xd9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x35, 0x6b, 0xeb, 0x4e, 0x66, 0x06, 0x00, 0x00,
}
